@charset "UTF-8";

/// Increments up or down a defined scale and returns an adjusted value. This
/// helps establish consistent measurements and spacial relationships throughout
/// your project. We provide a list of commonly used scales as
/// [pre-defined variables][scales].
/// 向上或向下递增定义的比例并返回调整后的值。这有助于在整个项目中建立一致的测量和空间关系。
/// 我们提供了常用尺度的列表作为预定义变量。
///
/// [scales]: https://github.com/thoughtbot/bourbon/blob/master/core/bourbon/helpers/_scales.scss
///
/// @argument {number (unitless)} $increment
///   How many steps to increment up or down the scale.
///   向上或向下增加多少步。
///
/// @argument {number (with unit) | list} $value [1em]
///   The base value the scale starts at. Can also be set globally using the
///   `modular-scale-base` key in the Bourbon settings.
///   比例起始的基值。也可以使用 Bourbon 设置中的 modular-scale-base 键进行全局设置。
///
/// @argument {number (unitless)} $ratio [1.25]
///   The ratio the scale is built on. Can also be set globally using the
///   `modular-scale-ratio` key in the Bourbon settings.
///   比例所依据的比例。也可以使用 Bourbon 设置中的 modular-scale-ratio 键进行全局设置。
///
/// @return {number (with unit)}
///
/// @example scss
///   .element {
///     font-size: modular-scale(2);
///   }
///
///   // CSS Output
///   .element {
///     font-size: 1.5625em;
///   }
///
/// @example scss
///   .element {
///     margin-right: modular-scale(3, 2em);
///   }
///
///   // CSS Output
///   .element {
///     margin-right: 3.90625em;
///   }
///
/// @example scss
///   .element {
///     font-size: modular-scale(3, 1em 1.6em, $major-seventh);
///   }
///
///   // CSS Output
///   .element {
///     font-size: 3em;
///   }
///
/// @example scss
///   // Globally change the base ratio
///   $bourbon: (
///     "modular-scale-ratio": 1.2,
///   );
///
///   .element {
///     font-size: modular-scale(3);
///   }
///
///   // CSS Output
///   .element {
///     font-size: 1.728em;
///   }
///
/// @require {function} _fetch-bourbon-setting

@function modular-scale(
  $increment,
  $value: _fetch-bourbon-setting("modular-scale-base"),
  $ratio: _fetch-bourbon-setting("modular-scale-ratio")
) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}
